import os
import boto3
from botocore.exceptions import ClientError
from typing import Optional
from fastapi import BackgroundTasks
from app.config import settings

class EmailService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º —á–µ—Ä–µ–∑ AWS SES"""
    
    def __init__(self):
        self.aws_region = settings.aws_region
        self.aws_access_key_id = settings.aws_access_key_id
        self.aws_secret_access_key = settings.aws_secret_access_key
        self.sender_email = settings.sender_email
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SES –∫–ª–∏–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å AWS credentials
        self.ses_client = None
        if self.aws_access_key_id and self.aws_secret_access_key:
            try:
                self.ses_client = boto3.client(
                    "ses",
                    region_name=self.aws_region,
                    aws_access_key_id=self.aws_access_key_id,
                    aws_secret_access_key=self.aws_secret_access_key
                )
                print("‚úÖ AWS SES client initialized successfully")
            except Exception as e:
                print(f"‚ùå Failed to initialize AWS SES client: {e}")
        else:
            print("‚ö†Ô∏è AWS credentials not provided, email service will use mock mode")
    
    def send_email(self, to_email: str, subject: str, body_text: str, body_html: str = "") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —á–µ—Ä–µ–∑ AWS SES
        
        Args:
            to_email: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
            body_text: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            body_html: HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if not self.ses_client:
            # Mock —Ä–µ–∂–∏–º - –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
            print(f"üìß MOCK EMAIL SENT:")
            print(f"   To: {to_email}")
            print(f"   Subject: {subject}")
            print(f"   Body: {body_text}")
            return True
        
        try:
            response = self.ses_client.send_email(
                Source=self.sender_email,
                Destination={"ToAddresses": [to_email]},
                Message={
                    "Subject": {"Data": subject},
                    "Body": {
                        "Text": {"Data": body_text},
                        "Html": {"Data": body_html or body_text},
                    },
                }
            )
            print(f"‚úÖ Email sent successfully: {response['MessageId']}")
            return True
        except ClientError as e:
            print(f"‚ùå Failed to send email: {e.response['Error']['Message']}")
            return False
        except Exception as e:
            print(f"‚ùå Unexpected error sending email: {e}")
            return False
    
    def send_verification_email(self, to_email: str, verification_token: str, tenant_name: str, base_url: str = "http://localhost:8000") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
        
        Args:
            to_email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            verification_token: –¢–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            tenant_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            base_url: –ë–∞–∑–æ–≤—ã–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        subject = f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ {tenant_name}"
        
        verification_url = f"{base_url}/auth/verify?token={verification_token}"
        
        body_text = f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ {tenant_name}. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ email –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:

{verification_url}

–ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ {tenant_name}
        """.strip()
        
        body_html = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</title>
</head>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
    <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
        <h2 style="color: #2c3e50;">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</h2>
        
        <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
        
        <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ <strong>{tenant_name}</strong>. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ email –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</p>
        
        <div style="text-align: center; margin: 30px 0;">
            <a href="{verification_url}" 
               style="background-color: #3498db; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;">
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å Email
            </a>
        </div>
        
        <p>–ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä:</p>
        <p style="word-break: break-all; color: #7f8c8d;">{verification_url}</p>
        
        <hr style="border: none; border-top: 1px solid #ecf0f1; margin: 30px 0;">
        
        <p style="font-size: 14px; color: #7f8c8d;">
            –ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
        </p>
        
        <p style="font-size: 14px; color: #7f8c8d;">
            –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
            –ö–æ–º–∞–Ω–¥–∞ {tenant_name}
        </p>
    </div>
</body>
</html>
        """
        
        return self.send_email(to_email, subject, body_text, body_html)
    
    def send_welcome_email(self, to_email: str, tenant_name: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
        
        Args:
            to_email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tenant_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        subject = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {tenant_name}!"
        
        body_text = f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {tenant_name}! –í–∞—à email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ {tenant_name}
        """.strip()
        
        body_html = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</title>
</head>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
    <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
        <h2 style="color: #27ae60;">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h2>
        
        <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
        
        <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <strong>{tenant_name}</strong>! –í–∞—à email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.</p>
        
        <p>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.</p>
        
        <hr style="border: none; border-top: 1px solid #ecf0f1; margin: 30px 0;">
        
        <p style="font-size: 14px; color: #7f8c8d;">
            –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
            –ö–æ–º–∞–Ω–¥–∞ {tenant_name}
        </p>
    </div>
</body>
</html>
        """
        
        return self.send_email(to_email, subject, body_text, body_html)


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
email_service = EmailService() 
