#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º email
"""

import os
import sys
import json
from unittest.mock import patch

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from fastapi.testclient import TestClient
from app.main import app
from app.infrastructure.database.database_factory import DatabaseFactory
from app.infrastructure.database.mock_database import MockDatabase


def test_full_auth_cycle():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è -> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email -> –≤—Ö–æ–¥ -> –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    # –ü–∞—Ç—á–∏–º DatabaseFactory –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–∫-–±–∞–∑—ã
    with patch('app.main.DatabaseFactory.create_database', return_value=MockDatabase()):
        with patch('app.infrastructure.external.email_service.email_service.send_verification_email', return_value=True):
            with patch('app.infrastructure.external.email_service.email_service.send_welcome_email', return_value=True):
                client = TestClient(app)
        
                # 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                print("\n1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
                register_data = {
                    "email": "fullcycle@example.com",
                    "password": "testpassword123",
                    "tenant_name": "Full Cycle Test Practice",
                    "role": "therapist",
                    "locale": "ru"
                }
                
                response = client.post("/auth/register", json=register_data)
                print(f"Status: {response.status_code}")
                
                if response.status_code == 201:
                    print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                    user_data = response.json()
                    user_id = user_data["user_id"]
                    print(f"User ID: {user_id}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.text}")
                    assert False, f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.text}"
                
                # 2. –ü–æ–ª—É—á–∞–µ–º verification token –∏–∑ –º–æ–∫-–±–∞–∑—ã
                print("\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ verification token...")
                mock_db = DatabaseFactory.create_database()
                user = mock_db.get_user_by_email("fullcycle@example.com")
                
                assert user and user.get("verification_token"), "Verification token –Ω–µ –Ω–∞–π–¥–µ–Ω"
                verification_token = user["verification_token"]
                print(f"‚úÖ Verification token –ø–æ–ª—É—á–µ–Ω: {verification_token[:20]}...")
                
                # 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email
                print("\n3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email...")
                response = client.get(f"/auth/verify?token={verification_token}")
                print(f"Status: {response.status_code}")
                
                assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email: {response.text}"
                print("‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                print(f"Response: {response.json()}")
                
                # 4. –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                print("\n4. –í—Ö–æ–¥ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email...")
                login_data = {
                    "email": "fullcycle@example.com",
                    "password": "testpassword123"
                }
                
                response = client.post("/auth/login", json=login_data)
                print(f"Status: {response.status_code}")
                
                assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.text}"
                print("‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω")
                login_response = response.json()
                print(f"Response: {json.dumps(login_response, indent=2)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å session cookie
                cookies = response.cookies
                print(f"–í—Å–µ cookies: {dict(cookies)}")
                assert "session_token" in cookies, f"Session cookie –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ cookies: {list(cookies.keys())}"
                print(f"‚úÖ Session cookie —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {cookies['session_token'][:20]}...")
                
                # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å —Ç–æ–∫–µ–Ω–æ–º
                print("\n5. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
                response = client.get("/auth/me")
                print(f"Status: {response.status_code}")
                
                assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {response.text}"
                print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–ª—É—á–µ–Ω–∞")
                user_info = response.json()
                print(f"User info: {json.dumps(user_info, indent=2)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
                assert user_info["email"] == "fullcycle@example.com"
                assert user_info["role"] == "therapist"
                assert user_info["is_verified"] == True
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                
                # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–∫-–±–∞–∑—ã –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                print("\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–∫-–±–∞–∑—ã...")
                tenants = mock_db.get_tenants()
                
                # –ü–æ–ª—É—á–∞–µ–º tenant_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                assert len(tenants) > 0, "–ù–µ—Ç tenants –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                tenant_id = tenants[0]['id']
                users = mock_db.get_users(tenant_id)
                
                print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ tenants: {len(tenants)}")
                print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ users: {len(users)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ –±–∞–∑–µ
                updated_user = mock_db.get_user_by_email("fullcycle@example.com")
                assert updated_user and updated_user.get("is_verified"), "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                
                print("\n‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")


def test_verification_with_invalid_token():
    """–¢–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º")
    
    with patch('app.main.DatabaseFactory.create_database', return_value=MockDatabase()):
        with patch('app.infrastructure.external.email_service.email_service.send_verification_email', return_value=True):
            with patch('app.infrastructure.external.email_service.email_service.send_welcome_email', return_value=True):
                client = TestClient(app)
        
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
                response = client.get("/auth/verify?token=invalid-token-123")
                print(f"Status: {response.status_code}")
                
                if response.status_code == 400:
                    print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
                    print(f"Response: {response.json()}")
                else:
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")


def test_login_with_wrong_password():
    """–¢–µ—Å—Ç –≤—Ö–æ–¥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º")
    
    with patch('app.main.DatabaseFactory.create_database', return_value=MockDatabase()):
        with patch('app.infrastructure.external.email_service.email_service.send_verification_email', return_value=True):
            with patch('app.infrastructure.external.email_service.email_service.send_welcome_email', return_value=True):
                client = TestClient(app)
        
                # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                register_data = {
                    "email": "wrongpass@example.com",
                    "password": "correctpassword",
                    "tenant_name": "Wrong Pass Test",
                    "role": "therapist"
                }
                
                response = client.post("/auth/register", json=register_data)
                if response.status_code != 201:
                    print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∞")
                    return
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email
                mock_db = DatabaseFactory.create_database()
                user = mock_db.get_user_by_email("wrongpass@example.com")
                if user and user.get("verification_token"):
                    client.get(f"/auth/verify?token={user['verification_token']}")
                
                # –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
                login_data = {
                    "email": "wrongpass@example.com",
                    "password": "wrongpassword"
                }
                
                response = client.post("/auth/login", json=login_data)
                print(f"Status: {response.status_code}")
                
                if response.status_code == 401:
                    print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
                    print(f"Response: {response.json()}")
                else:
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")


def test_logout():
    """–¢–µ—Å—Ç –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
    
    with patch('app.main.DatabaseFactory.create_database', return_value=MockDatabase()):
        with patch('app.infrastructure.external.email_service.email_service.send_verification_email', return_value=True):
            with patch('app.infrastructure.external.email_service.email_service.send_welcome_email', return_value=True):
                client = TestClient(app)
        
                # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏ –≤—Ö–æ–¥–∏–º
                register_data = {
                    "email": "logout@example.com",
                    "password": "testpassword",
                    "tenant_name": "Logout Test",
                    "role": "therapist"
                }
                
                response = client.post("/auth/register", json=register_data)
                if response.status_code != 201:
                    print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∞")
                    return
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email
                mock_db = DatabaseFactory.create_database()
                user = mock_db.get_user_by_email("logout@example.com")
                if user and user.get("verification_token"):
                    client.get(f"/auth/verify?token={user['verification_token']}")
                
                # –í—Ö–æ–¥–∏–º
                login_data = {
                    "email": "logout@example.com",
                    "password": "testpassword"
                }
                
                response = client.post("/auth/login", json=login_data)
                if response.status_code != 200:
                    print("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∞")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                response = client.get("/auth/me")
                if response.status_code != 200:
                    print("‚ùå –ù–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                    return
                
                # –í—ã—Ö–æ–¥–∏–º
                response = client.post("/auth/logout")
                print(f"Status: {response.status_code}")
                
                if response.status_code == 200:
                    print("‚úÖ –í—ã—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω")
                    print(f"Response: {response.json()}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    response = client.get("/auth/me")
                    if response.status_code == 401:
                        print("‚úÖ –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –¥–æ—Å—Ç—É–ø –∫ /auth/me –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
                    else:
                        print(f"‚ùå –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å /auth/me: {response.status_code}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {response.text}")


if __name__ == "__main__":
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ===")
    
    test_full_auth_cycle()
    test_verification_with_invalid_token()
    test_login_with_wrong_password()
    test_logout()
    
    print("\n=== –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã ===") 
