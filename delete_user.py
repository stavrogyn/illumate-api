#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from database_factory import DatabaseFactory
from mock_database import MockDatabase
from config import settings

def get_db_session():
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    engine = create_engine(settings.database_url)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    return SessionLocal()

def delete_user_by_email(email: str, use_mock: bool = False):
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    
    Args:
        email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        use_mock: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∫-–±–∞–∑—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    """
    
    print(f"=== –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email} ===")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if use_mock:
        print("üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–∫-–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        db = MockDatabase()
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email: {email}")
        user = db.get_user_by_email(email)
        
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:")
        print(f"   ID: {user['id']}")
        print(f"   Email: {user['email']}")
        print(f"   Role: {user['role']}")
        print(f"   Verified: {user['is_verified']}")
        print(f"   Created: {user['created_at']}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        confirm = input(f"\n‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email}? (y/N): ").strip().lower()
        
        if confirm not in ['y', 'yes', '–¥–∞']:
            print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return False
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        try:
            # –£–¥–∞–ª—è–µ–º –∏–∑ email mapping
            if hasattr(db, 'email_to_user') and email in db.email_to_user:
                del db.email_to_user[email]
                print("   ‚úÖ –£–¥–∞–ª–µ–Ω –∏–∑ email mapping")
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user['id'] in db.users:
                del db.users[user['id']]
                print("   ‚úÖ –£–¥–∞–ª–µ–Ω –∏–∑ users")
            
            # –£–¥–∞–ª—è–µ–º tenant –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            tenant_id = user.get('tenant_id')
            if tenant_id and hasattr(db, 'tenants'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —ç—Ç–æ–º tenant
                other_users = [u for u in db.users.values() if u.get('tenant_id') == tenant_id]
                if not other_users and tenant_id in db.tenants:
                    del db.tenants[tenant_id]
                    print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω tenant {tenant_id} (–±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)")
            
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
            return False
    
    else:
        print("üóÑÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_session = get_db_session()
        
        try:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email: {email}")
            
            # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query = text("""
                SELECT u.id, u.email, u.role, u.is_verified, u.created_at, u.tenant_id,
                       t.name as tenant_name
                FROM users u
                LEFT JOIN tenants t ON u.tenant_id = t.id
                WHERE u.email = :email
            """)
            
            result = db_session.execute(query, {"email": email})
            user_data = result.fetchone()
            
            if not user_data:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:")
            print(f"   ID: {user_data.id}")
            print(f"   Email: {user_data.email}")
            print(f"   Role: {user_data.role}")
            print(f"   Verified: {user_data.is_verified}")
            print(f"   Created: {user_data.created_at}")
            print(f"   Tenant: {user_data.tenant_name or 'N/A'}")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            confirm = input(f"\n‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email}? (y/N): ").strip().lower()
            
            if confirm not in ['y', 'yes', '–¥–∞']:
                print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return False
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print(f"\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            delete_user_query = text("DELETE FROM users WHERE email = :email")
            result = db_session.execute(delete_user_query, {"email": email})
            
            if result.rowcount > 0:
                print("   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å tenant
                if user_data.tenant_id:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —ç—Ç–æ–º tenant
                    check_tenant_query = text("SELECT COUNT(*) FROM users WHERE tenant_id = :tenant_id")
                    result = db_session.execute(check_tenant_query, {"tenant_id": user_data.tenant_id})
                    user_count = result.scalar()
                    
                    if user_count == 0:
                        # –£–¥–∞–ª—è–µ–º tenant
                        delete_tenant_query = text("DELETE FROM tenants WHERE id = :tenant_id")
                        db_session.execute(delete_tenant_query, {"tenant_id": user_data.tenant_id})
                        print(f"   ‚úÖ Tenant {user_data.tenant_id} —É–¥–∞–ª–µ–Ω (–±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)")
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                db_session.commit()
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
                return True
            else:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
            db_session.rollback()
            return False
        finally:
            db_session.close()

def list_all_users(use_mock: bool = False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    print("=== –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===")
    
    if use_mock:
        db = MockDatabase()
        
        if not db.users:
            print("üì≠ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return
        
        print(f"\n–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(db.users)}")
        print("-" * 80)
        
        for user_id, user in db.users.items():
            print(f"ID: {user_id}")
            print(f"Email: {user['email']}")
            print(f"Role: {user['role']}")
            print(f"Verified: {user['is_verified']}")
            print(f"Created: {user['created_at']}")
            print("-" * 80)
    
    else:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_session = get_db_session()
        
        try:
            # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            query = text("""
                SELECT u.id, u.email, u.role, u.is_verified, u.created_at,
                       t.name as tenant_name
                FROM users u
                LEFT JOIN tenants t ON u.tenant_id = t.id
                ORDER BY u.created_at DESC
            """)
            
            result = db_session.execute(query)
            users = result.fetchall()
            
            if not users:
                print("üì≠ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
                return
            
            print(f"\n–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            print("-" * 80)
            
            for user in users:
                print(f"ID: {user.id}")
                print(f"Email: {user.email}")
                print(f"Role: {user.role}")
                print(f"Verified: {user.is_verified}")
                print(f"Created: {user.created_at}")
                print(f"Tenant: {user.tenant_name or 'N/A'}")
                print("-" * 80)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        finally:
            db_session.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python delete_user.py <email> [--mock]")
        print("  python delete_user.py --list [--mock]")
        print("\n–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python delete_user.py nikitakrugovoi@gmail.com")
        print("  python delete_user.py nikitakrugovoi@gmail.com --mock")
        print("  python delete_user.py --list")
        return
    
    use_mock = "--mock" in sys.argv
    
    if "--list" in sys.argv:
        list_all_users(use_mock)
    else:
        email = sys.argv[1]
        if email.startswith("--"):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email")
            return
        
        delete_user_by_email(email, use_mock)

if __name__ == "__main__":
    main() 
