#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email —Å–µ—Ä–≤–∏—Å–∞
"""

import os
import sys
from unittest.mock import patch, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from email_service import EmailService


def test_email_service_mock_mode():
    """–¢–µ—Å—Ç email —Å–µ—Ä–≤–∏—Å–∞ –≤ mock —Ä–µ–∂–∏–º–µ (–±–µ–∑ AWS credentials)"""
    print("\nüß™ 1. Testing Email Service in Mock Mode")
    
    # –û—á–∏—â–∞–µ–º AWS credentials –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    with patch.dict(os.environ, {}, clear=True):
        email_service = EmailService()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ SES –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        assert email_service.ses_client is None
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É verification email
        result = email_service.send_verification_email(
            "test@example.com",
            "test-token-123",
            "Test Company",
            "http://localhost:8000"
        )
        
        assert result is True, "Mock email service did not return True"
        print("‚úÖ Mock email service works correctly \n")


def test_email_service_with_aws_credentials():
    """–¢–µ—Å—Ç email —Å–µ—Ä–≤–∏—Å–∞ —Å AWS credentials (mock SES)"""
    print("\nüß™ 2. Testing Email Service with AWS Credentials")
    
    # –ú–æ–∫–∞–µ–º AWS credentials
    with patch.dict(os.environ, {
        "AWS_REGION": "us-east-1",
        "AWS_ACCESS_KEY_ID": "test-key",
        "AWS_SECRET_ACCESS_KEY": "test-secret",
        "SENDER_EMAIL": "test@example.com"
    }):
        # –ú–æ–∫–∞–µ–º boto3.client
        mock_ses_client = MagicMock()
        mock_response = {"MessageId": "test-message-id"}
        mock_ses_client.send_email.return_value = mock_response
        
        with patch('boto3.client', return_value=mock_ses_client):
            email_service = EmailService()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ SES –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            assert email_service.ses_client is not None
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É verification email
            result = email_service.send_verification_email(
                "test@example.com",
                "test-token-123",
                "Test Company",
                "http://localhost:8000"
            )
            
            assert result is True, "SES email service did not return True"
            assert mock_ses_client.send_email.called, "SES send_email was not called"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞
            call_args = mock_ses_client.send_email.call_args
            assert call_args[1]['Source'] == "test@example.com"
            assert call_args[1]['Destination']['ToAddresses'] == ["test@example.com"]
            assert "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" in call_args[1]['Message']['Subject']['Data']
            
            print("‚úÖ AWS SES email service works correctly \n")


def test_welcome_email():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
    print("\nüß™ 3. Testing Welcome Email")
    
    with patch.dict(os.environ, {}, clear=True):
        email_service = EmailService()
        
        result = email_service.send_welcome_email(
            "test@example.com",
            "Test Company"
        )
        
        assert result is True, "Welcome email service did not return True"
        print("‚úÖ Welcome email service works correctly \n")


def test_email_service_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ email —Å–µ—Ä–≤–∏—Å–µ"""
    print("\nüß™ 4. Testing Email Service Error Handling")
    
    # –ú–æ–∫–∞–µ–º AWS credentials
    with patch.dict(os.environ, {
        "AWS_REGION": "us-east-1",
        "AWS_ACCESS_KEY_ID": "test-key",
        "AWS_SECRET_ACCESS_KEY": "test-secret",
        "SENDER_EMAIL": "test@example.com"
    }):
        # –ú–æ–∫–∞–µ–º boto3.client —Å –æ—à–∏–±–∫–æ–π
        mock_ses_client = MagicMock()
        mock_ses_client.send_email.side_effect = Exception("AWS SES Error")
        
        with patch('boto3.client', return_value=mock_ses_client):
            email_service = EmailService()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
            result = email_service.send_email(
                "test@example.com",
                "Test Subject",
                "Test Body"
            )
            
            assert result is False, "Error handling did not return False"
            print("‚úÖ Error handling works correctly \n")


if __name__ == "__main__":
    print("üöÄ Starting Email Service Tests")
    
    test_email_service_mock_mode()
    test_email_service_with_aws_credentials()
    test_welcome_email()
    test_email_service_error_handling()
    
    print("\n‚úÖ All email service tests passed!") 
