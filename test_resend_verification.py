#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è endpoint –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email
"""

import os
import sys
import json
from unittest.mock import patch

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from fastapi.testclient import TestClient
from main import app
from database_factory import DatabaseFactory, MockDatabase


def test_resend_verification_success():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    # –û—á–∏—â–∞–µ–º AWS credentials –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è mock —Ä–µ–∂–∏–º–∞
    with patch.dict(os.environ, {}, clear=True):
        with patch.object(DatabaseFactory, 'create_database', return_value=MockDatabase()):
            with patch('email_service.email_service.send_verification_email', return_value=True):
                client = TestClient(app)
                
                # 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                register_data = {
                    "email": "resend@example.com",
                    "password": "testpassword123",
                    "tenant_name": "Resend Test Practice",
                    "role": "therapist"
                }
                
                response = client.post("/auth/register", json=register_data)
                assert response.status_code == 201, f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.text}"
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                
                # 2. –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π verification token
                mock_db = DatabaseFactory.create_database()
                user = mock_db.get_user_by_email("resend@example.com")
                assert user and user.get("verification_token"), "Verification token –Ω–µ –Ω–∞–π–¥–µ–Ω"
                first_token = user["verification_token"]
                print(f"‚úÖ –ü–µ—Ä–≤—ã–π token: {first_token[:20]}...")
                
                # 3. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                resend_data = {"email": "resend@example.com"}
                response = client.post("/auth/resend-verification", json=resend_data)
                
                assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.text}"
                print("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞")
                
                response_data = response.json()
                assert response_data["message"] == "Verification email sent successfully"
                assert response_data["email"] == "resend@example.com"
                
                # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
                updated_user = mock_db.get_user_by_email("resend@example.com")
                assert updated_user and updated_user.get("verification_token"), "–ù–æ–≤—ã–π verification token –Ω–µ –Ω–∞–π–¥–µ–Ω"
                second_token = updated_user["verification_token"]
                print(f"‚úÖ –ù–æ–≤—ã–π token: {second_token[:20]}...")
                
                assert first_token != second_token, "–¢–æ–∫–µ–Ω –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è"
                assert not updated_user["is_verified"], "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
                
                print("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")


def test_resend_verification_user_not_found():
    """–¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    with patch.dict(os.environ, {}, clear=True):
        with patch.object(DatabaseFactory, 'create_database', return_value=MockDatabase()):
            with patch('email_service.email_service.send_verification_email', return_value=True):
                client = TestClient(app)
                
                resend_data = {"email": "nonexistent@example.com"}
                response = client.post("/auth/resend-verification", json=resend_data)
                
                assert response.status_code == 404, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}"
                print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                
                response_data = response.json()
                assert response_data["detail"] == "User not found"


def test_resend_verification_already_verified():
    """–¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ email"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ email")
    
    with patch.dict(os.environ, {}, clear=True):
        with patch.object(DatabaseFactory, 'create_database', return_value=MockDatabase()):
            with patch('email_service.email_service.send_verification_email', return_value=True):
                with patch('email_service.email_service.send_welcome_email', return_value=True):
                    client = TestClient(app)
                    
                    # 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    register_data = {
                        "email": "verified@example.com",
                        "password": "testpassword123",
                        "tenant_name": "Verified Test Practice",
                        "role": "therapist"
                    }
                    
                    response = client.post("/auth/register", json=register_data)
                    assert response.status_code == 201, f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.text}"
                    
                    # 2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email
                    mock_db = DatabaseFactory.create_database()
                    user = mock_db.get_user_by_email("verified@example.com")
                    assert user and user.get("verification_token"), "Verification token –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    
                    response = client.get(f"/auth/verify?token={user['verification_token']}")
                    assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {response.text}"
                    
                    # 3. –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
                    resend_data = {"email": "verified@example.com"}
                    response = client.post("/auth/resend-verification", json=resend_data)
                    
                    assert response.status_code == 400, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}"
                    print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π email")
                    
                    response_data = response.json()
                    assert response_data["detail"] == "Email is already verified"


def test_resend_verification_invalid_email():
    """–¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º email"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º email")
    
    with patch.dict(os.environ, {}, clear=True):
        with patch.object(DatabaseFactory, 'create_database', return_value=MockDatabase()):
            with patch('email_service.email_service.send_verification_email', return_value=True):
                client = TestClient(app)
                
                resend_data = {"email": "invalid-email"}
                response = client.post("/auth/resend-verification", json=resend_data)
                
                assert response.status_code == 422, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}"
                print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")


def test_resend_verification_multiple_requests():
    """–¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É")
    
    with patch.dict(os.environ, {}, clear=True):
        with patch.object(DatabaseFactory, 'create_database', return_value=MockDatabase()):
            with patch('email_service.email_service.send_verification_email', return_value=True):
                client = TestClient(app)
                
                # 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                register_data = {
                    "email": "multiple@example.com",
                    "password": "testpassword123",
                    "tenant_name": "Multiple Test Practice",
                    "role": "therapist"
                }
                
                response = client.post("/auth/register", json=register_data)
                assert response.status_code == 201, f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.text}"
                
                # 2. –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω
                mock_db = DatabaseFactory.create_database()
                user = mock_db.get_user_by_email("multiple@example.com")
                first_token = user["verification_token"]
                
                # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                resend_data = {"email": "multiple@example.com"}
                
                for i in range(3):
                    response = client.post("/auth/resend-verification", json=resend_data)
                    assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {i+1}: {response.text}"
                    print(f"‚úÖ –ó–∞–ø—Ä–æ—Å {i+1} —É—Å–ø–µ—à–µ–Ω")
                
                # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                updated_user = mock_db.get_user_by_email("multiple@example.com")
                final_token = updated_user["verification_token"]
                
                assert first_token != final_token, "–¢–æ–∫–µ–Ω –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
                print("‚úÖ –¢–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö")


if __name__ == "__main__":
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ ===")
    
    test_resend_verification_success()
    test_resend_verification_user_not_found()
    test_resend_verification_already_verified()
    test_resend_verification_invalid_email()
    test_resend_verification_multiple_requests()
    
    print("\n=== –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã ===") 
